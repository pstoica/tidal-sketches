cps (130/120)

do
  let sc = Scales.dorian
  k1
    $ every 2 ((1/16) ~>)
    $ (sometimes (stut' 3 (0.3) (|=| velocity "0.8"))
    $ foldEvery [4,5] (superimpose (slow 1.5 . (|+| n "-12")))
    $ n (toScale sc ("[0*5, 9*3, 10*2, -2*3]" + "<0 -3 0 4 5 6>")))
    |=| dur (scale 0.3 0.3 $ slow 4 $ sine1)
    |=| macro1 (slow 12 $ scale 0.0 1 $ sine1)
    |=| macro2 (slow 16 $ scale 0.0 1 $ sine1)
    |=| macro3 (slow 10 $ scale 0.0 1 $ sine1)
    |=| macro4 (slow 32 $ scale 0.0 1 $ sine1)
    |=| velocity (slow 7 $ scale 0.6 1 $ sine1)

    $ n (toScale sc ("{0 3 5 4, 7 [8 10] 5 6 [9]}"))


do
  let sc = Scales.major
  k1
    $ every 2 ((1/16) ~>)
    $ foldEvery [4,5] (superimpose (slow 1.5 . (|+| n "-12")))
    $ n (toScale sc ("{0 1 2 1, 5 5 7 9 6 9 4 -3 -2}"))
    |=| dur (scale 0.1 0.3 $ slow 4 $ sine1)
    |=| macro1 (slow 12 $ scale 0.0 1 $ sine1)
    |=| macro2 (slow 16 $ scale 0.0 1 $ sine1)
    |=| macro3 (slow 10 $ scale 0.0 1 $ sine1)
    |=| macro4 (slow 32 $ scale 0.0 1 $ sine1)
    |=| velocity (slow 7 $ scale 0.6 1 $ sine1)

do
  let sc = Scales.dorian
  k1
    $ n (toScale sc ("[[0 2 3]/1, [4 5 [7 6]]/4, [8 10 12]/6]]"))
    |=| dur (scale 0.1 0.3 $ slow 4 $ sine1)
    |=| macro1 (slow 12 $ scale 0.0 1 $ sine1)
    |=| macro2 (slow 16 $ scale 0.0 1 $ sine1)
    |=| macro3 (slow 10 $ scale 0.0 1 $ sine1)
    |=| macro4 (slow 32 $ scale 0.0 1 $ sine1)
    |=| velocity (slow 7 $ scale 0.6 1 $ sine1)

    $ n (toScale sc ("[[0 2 3]/1, [4 5 [7 6]]/4, [8 10 12]/6]]"))

    $ n (toScale sc ("[-2 [3 -1] [4 6 8]]/5" + "0 7"))

do
  let sc = Scales.dorian
  k1
    $ n (toScale sc ("[0 <-7 -4 -4> <-8 -6 -9> <-6 -5 -3>]/4"))
    |=| dur "3"
  k2
    $ n (toScale sc ("0 1 3" + "<0 7 5 3 0 7 4 5>"))
    |=| dur "1.5"
    |=| macro1 (slow 16 $ scale 0.0 0.2 $ sine1)
  k3
    $ slow 1.5
    $ n (toScale sc ("0 [1 3] [8 <10 10 13 13 10 10 14 14> 2]" + "[-7, 7]"))
    |=| dur "1.2"
    |=| macro1 (slow 12 $ scale 0.0 0.5 $ sine1)




hush
