cps (120/120)

cps(-1)

do
  let sc = Scales.major
  k1
    $ foldEvery [3,6] (fast 1.5)
    $ n (toScale sc ("<0 2 4>*4" + "<0 2 4 5 4 2 0 -2>" + "-7"))
    |=| macro1 (slow 8 $ scale 0.75 1 $ sine1)
    |=| macro2 (slow 8 $ scale 0.0 1 $ sine1)
    |=| macro3 (slow 32 $ scale 0.2 0.4 $ sine1)
    |=| dur "2"
    |=| velocity (scale 0.3 0.7 $ rand)
  k2
    $ foldEvery [2,3] (slow 2)
    $ fast 2
    $ n (toScale sc ("<0 5 4>" + "<0 2 4 7>" + "0"))
    |=| macro1 (slow 8 $ scale 0.75 1 $ sine1)
    |=| macro2 (slow 8 $ scale 0.0 1 $ sine1)
    |=| dur "2"
    |=| velocity (scale 0.3 0.7 $ rand)
  k3
    $ gtfo
    $ slow 1.5 (
    n (toScale sc ("<0 3 4 -5>*8" + "<0 2 4 7>" + "0 7 -7 -14")))
    |=| macro1 (slow 8 $ scale 0.75 1 $ sine1)
    |=| macro2 (slow 8 $ scale 0.0 1 $ sine1)
    |=| dur "2"
    |=| velocity (scale 0.3 0.7 $ rand)


cps (-1)

cps(1)

do
  d1
    $ stack [
      s "nu(3,8)"
        |=| n "2"
        |=| pan (scale 0.1 0.4 $ slow 16 $ sine1)
        |=| gain (scale 0.2 0.8 $ slow 16 $ sine1)
        |+| gain (scale 0 0.2 $ slow 4 $ sine1)
        |+| gain "0.1"
        |=| release "0.5"
        |=| attack "0.1"
        |*| speed "2"
        |=| beginend (scale 0 0.5 $ slow 8 $ sine1) "0.1",
      s "nu*3"
        |=| n "2"
        |=| pan (scale 0.1 0.9 $ slow 2 $ sine1)
        |=| gain (scale 0.7 1 $ slow 4 $ sine1)
        |+| gain "0.2"
        |=| release "0.5"
        |=| attack "0.1"
        |=| accelerate "0.05"
        |*| speed "-1"
        |=| beginend (scale 0 0.5 $ slow 8 $ sine1) "0.1",
      s "nu*16"
        |=| n "2"
        |=| pan (scale 0.3 0.9 $ slow 8 $ sine1)
        |=| gain (scale 0.5 0.8 $ slow 16 $ sine1)
        |=| release (scale 0.5 1.5 $ slow 32 $ sine1)
        |=| attack "0.01"
        |*| speed "4"
        |=| beginend (scale 0 0.5 $ slow 8 $ sine1) (scale 0.1 0.3 $ slow 8 $ sine1)
    ]



hush
