import Sound.Tidal.MIDI.Context
import Sound.Tidal.MIDI.Synth
import Sound.Tidal.MIDI.System1M
import Sound.Tidal.MIDI.Serum
import qualified Sound.Tidal.Scales as Scales

devices <- midiDevices
k1 <- midiStream devices "IAC Driver Bus 1" 1 serumController
k2 <- midiStream devices "IAC Driver Bus 1" 2 serumController
k3 <- midiStream devices "IAC Driver Bus 1" 3 serumController
k4 <- midiStream devices "IAC Driver Bus 1" 4 serumController
m1 <- midiStream devices "IAC Driver Bus 1" 5 system1mController
m2 <- midiStream devices "IAC Driver Bus 1" 6 system1mController
m3 <- midiStream devices "IAC Driver Bus 1" 7 system1mController
m4 <- midiStream devices "IAC Driver Bus 1" 8 system1mController

let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
    rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
    spike p = ((|+| delaytime (scale 0.001 0.3 $ slow 7.1 sine1)) . (|+| delayfeedback (scale 0.7 0.99 $ slow 6.71 sine1))) $ p
    spike' p = (|+| delay "0.3") $ spike $ p
    ghost'' a f p = superimpose (((a/2 + a*2) ~>) . f) $ superimpose (((a + a/2) ~>) . f) $ p
    ghost' a p = ghost'' a ((|*| gain "0.7") . (|=| end "0.2") . (|*| speed "1.25")) p
    ghost p = ghost' 0.125 p
    jit start amount p = within (start, (start + 0.5)) (trunc (amount)) p
    gtfo p = (const $ sound "~") p
    shift p = (1024 <~)  p
    shift' x p = (x <~) p
    remPos num den = if x<0 then x+den else x where x = rem num den
    beginend bpat durpat = (begin bpat) # (end $ (+) <$> bpat <*> durpat)
    hush = mapM_ ($ silence) [k1, k2, k3, k4, d1, d2, d3, d4]
    solo = (>>) hush


-- keyStreams <- midiproxy 1 "IAC Driver Bus 1" [(synth, 1), (synth, 2), (synth, 3), (synth, 4), (system1m, 5),(system1m, 6),(system1m, 7),(system1m, 8)]

-- [k1, k2, k3, k4, m1,m2,m3,m4] <- sequence keyStreams

-- eval the functions below first, then you can do this:

-- midiInstrument $ (|+| note "45") $ mel m9 5 "0*8"

-- above, plays the first 5 notes of a m9 arpeggio, over a pattern of eighth notes,
-- starting at MIDI note #45

-- the "mel" function below relies on a "scramble" function which I don't
-- really like. I'm not good enough at haskell to know to how pick
-- random values out of the scale/arpeggio.

-- EVAL FIRST
